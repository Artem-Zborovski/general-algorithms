#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

string lposl(const vector<int>& a, const vector<int>& b, int n) {
    vector<vector<int>> F(n + 1, vector<int>(n + 1, 0));
    for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= n; ++j) {
            if (a[i - 1] == b[j - 1]) {
                F[i][j] = F[i - 1][j - 1] + 1;
            } else {
                F[i][j] = max(F[i - 1][j], F[i][j - 1]);
            }
        }
    }

    vector<int> inI, inJ;
    int i = n, j = n;
    while (i > 0 && j > 0) {
        if (a[i - 1] == b[j - 1]) {
            inI.push_back(i - 1);
            inJ.push_back(j - 1);
            --i;
            --j;
        } else if (F[i - 1][j] > F[i][j - 1]) {
            --i;
        } else {
            --j;
        }
    }

    
    string result = to_string(F[n][n]) + "\n";
    for (int k = inI.size() - 1; k >= 0; --k) {
        result += to_string(inI[k]) + " ";
    }
    result += "\n";
    for (int k = inJ.size() - 1; k >= 0; --k) {
        result += to_string(inJ[k]) + " ";
    }
    result += "\n";
    
    return result;
}

int main() {
    int n;
    cin >> n;
    if (n < 1 || n > 1000) {
        cout << "." << endl;
        return 0;
    }

    vector<int> a(n), b(n);
    for (int i = 0; i < n; ++i) {
        cin >> a[i];
        if (a[i] < 1 || a[i] > 1000) {
            cout << "." << endl;
            return 0;
        }
    }

    for (int i = 0; i < n; ++i) {
        cin >> b[i];
        if (b[i] < 1 || b[i] > 1000) {
            cout << "." << endl;
            return 0;
        }
    }

    cout << lposl(a, b, n);

    return 0;
}
